#!/usr/bin/env python

import os
import sys
import json
import base64
import zlib
import pickle
import datetime
import binascii
import commands
import argparse
import urllib
import urllib2


# dict<->json<->gzip<->hex
# space saving (gzip)
# and don't need to deal with bytes (hex) undoing a bit of the gzip savings
def encode(x):
    return binascii.hexlify(zlib.compress(json.dumps(x)))
def decode(x):
    return json.loads(zlib.decompress(binascii.unhexlify(x)))

def load_dump(fname="chirp_dump.json"):
    if os.path.exists(fname):
        with open(fname,"r") as fh:
            return json.load(fh)
    else:
        return {}

def update_dump(todump, fname="chirp_dump.json"):
    with open(fname,"w") as fh:
        return json.dump(todump,fh)

def get_timestamp():
    return int(datetime.datetime.now().strftime("%s"))

def maybe_chirp(classad, value):
    retcode = 0
    dump = load_dump()
    if "classads" not in dump: dump["classads"] = {}
    if "ClusterId" not in dump: dump["metadata"] = get_classad_metadata()
    dump["classads"][classad] = value
    # if "timestamp" not in dump: dump["timestamp"] = -1
    dump["timestamp"] = get_timestamp()
    # time_since_last_chirp = timestamp - dump["timestamp"]
    # if time_since_last_chirp > 5*60:
    #     really_chirp(dump)
    # dump["timestamp"] = timestamp
    if "CMSSW" in classad:
        if "EventRate" in classad: 
            # EventRate is near the end of the chirping train
            # https://github.com/cms-sw/cmssw/blob/master/FWCore/Services/plugins/CondorStatusUpdater.cc
            # so it signals we should flush all the classads
            retcode = really_chirp(dump)
    else:
        # If not CMSSW, then always force chirp
        retcode = really_chirp(dump)
    # print "Updating dump: {}\n".format(dump)
    update_dump(dump)
    return retcode

def get_classad(classad):
    stat,out = commands.getstatusoutput("""grep -i "^{}" "$_CONDOR_JOB_AD" | cut -d= -f2- | xargs echo""".format(classad))
    return out

def get_classad_metadata():
    return dict(
            clusterid = int(get_classad("ClusterId").split(".")[0]),
            procid = int(get_classad("ProcId")),
            taskname = str(get_classad("taskname")),
            tag = str(get_classad("tag")),
            jobnum = int(get_classad("jobnum")),
            retries = get_classad("metis_retries"),
            site = os.environ.get("GLIDEIN_CMSSite","Unknown"),
    )

def really_chirp(dump):
    tochirp = dict(
            data = encode(dump["classads"]),
            timestamp = dump["timestamp"],
            status = dump["classads"].get("ChirpMetisStatus","unknown"),
            )
    tochirp.update(dump["metadata"])

    # # requests isn't in CMSSW?
    # r = requests.post("http://uafino.physics.ucsb.edu:50010/chirp/update", data=tochirp)
    # return 0 if r.json()["updated"] else 1

    url = "http://uafino.physics.ucsb.edu:50010/chirp/update"
    data = urllib.urlencode(tochirp)
    req = urllib2.Request(url, data)
    response = urllib2.urlopen(req)
    return 0 if json.loads(response.read())["updated"] else 1

if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument("cmd")
    parser.add_argument("key")
    parser.add_argument("value")
    args = parser.parse_args()
    maybe_chirp(args.key,args.value)

