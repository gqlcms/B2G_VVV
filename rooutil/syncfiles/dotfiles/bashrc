# .bashrc asdf

# If not running interactively, don't do anything
[ -z "$PS1" ] && return


# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

HOST=$(hostname)
OSNAME=$(uname)

if [ "$TERM" != "dumb" ]; then
    dircolors -b 1>/dev/null 2>/dev/null
    if (( $? == 0 )); then
        alias ls='ls --color=auto --ignore=*.{d,aux,pcm,d,nav,snm,pyc,toc} --ignore=AutoDict*'
    else
        alias ls='ls -G'
    fi
fi

export TERM=xterm-256color

# set window title to user@host
echo -ne "\033]0;${USER}@${HOST}\007"

# function cmsswprompt {
#     cmsswpromptstr=""
#     if [ ! -z $CMSSW_VERSION ]; then
#         short=${CMSSW_VERSION#$"CMSSW_"}
#         short=${short/patch/p}
#         cmsswpromptstr=" \[\033[00;38;5;1m\][${short}]\[\e[0m\]"
#     fi
#     echo -e $cmsswpromptstr
# }

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
purple=$(tput setaf 6)
blue="\033[38;5;117m"
bold=$(tput bold)
reset=$(tput sgr0)

fancysep="â”‚"

# PS="\[$purple\][\D{%r}]\[$reset$blue\] [\u@\h]\[$reset\]"
# if [ -n "$WINDOW" ]; then
#     PS+=" \[\033[01;33m\][${STY##*.}]\[\e[0m\]"
# fi
# PS+=" \w > "
# PS1=$PS

PS="\[$purple\]\D{%r} \[$reset\]${fancysep}\[$blue\] \u@\h \[$reset\]${fancysep}"
if [ -n "$WINDOW" ]; then
    PS+=" \[\033[01;33m\]${STY##*.} \[\e[0m\]${fancysep}"
fi
PS+=" \w > "
PS1=$PS

export EDITOR=vim
export NICK="nick"
export PYTHONSTARTUP=~/.pythonrc.py

alias tmux='tmux -2' # fixes colors in vim

# this is so we can use <C-s> to forward history search without nuking the terminal
stty stop ""

# special host-dependent stuff
# cmsenv compatibility for ucsd uaf
export PATH=${HOME}/syncfiles/pyfiles/:${PATH}
if [[ ${HOST} == *uaf-* ]]; then 
    source /cvmfs/cms.cern.ch/cmsset_default.sh
    unset SSH_ASKPASS
    # export PATH=/nfs-7/texlive/2015/bin/x86_64-linux:$PATH
    export PATH=/home/users/namin/.local/bin:$PATH # for vim 8
    export PATH=/home/users/namin/.iterm2/:$PATH
    export UCSD="true"
fi
if [[ "$OSNAME" == "Darwin" ]]; then
	export PATH=${PATH}:/usr/local/Cellar/python3/3.6.2/bin/
    if [[ ${HOST} == *squark* ]]; then 
        source ~/root/bin/thisroot.sh
        export PATH=${PATH}:/usr/local/Cellar/python3/3.6.2/bin/
    else
        :
        source /Applications/root_v6.12.04/bin/thisroot.sh
    fi
    alias webd='web $(ls -1rtd ~/Downloads/* | tail -n 1)'
    alias temp="~/syncfiles/miscfiles/osx-cpu-temp"
fi
export PATH=${PATH}:~/syncfiles/miscfiles/

function iterm2_set_tab_rgb() {
    echo -ne "\033]6;1;bg;red;brightness;$1\a"
    echo -ne "\033]6;1;bg;green;brightness;$2\a"
    echo -ne "\033]6;1;bg;blue;brightness;$3\a"
}
export -f iterm2_set_tab_rgb
function iterm2_set_tab_default() {
    echo -ne "\033]6;1;bg;*;default\a"
}
export -f iterm2_set_tab_default
function iterm2_set_tab_label() {
    echo -ne "\033]0;$@\a"
}
function iterm2_set_label() {
    ~/.iterm2/it2setkeylabel set status "$@"
}
export -f iterm2_set_label
if [[ "${HOST}" == *squark* ]]; then iterm2_set_tab_label squark ; iterm2_set_tab_rgb 145 191 255; # blue
elif [[ "${HOST}" == *uaf-10.t2* ]]; then iterm2_set_tab_label uaf-10 ; iterm2_set_tab_rgb 69 221 102; # green
elif [[ "${HOST}" == *uaf-1.t2* ]]; then iterm2_set_tab_label uaf-1 ; iterm2_set_tab_rgb 255 170 32; # orange
elif [[ "${HOST}" == *uaf-8.t2* ]]; then iterm2_set_tab_label uaf-8 ; iterm2_set_tab_rgb 255 91 116; # pink/red
elif [[ "${HOST}" == *uaf-6.t2* ]]; then iterm2_set_tab_label uaf-6 ; iterm2_set_tab_rgb 166 117 161; # purple
elif [[ "${HOST}" == *uaf-7.t2* ]]; then iterm2_set_tab_label uaf-8 ; iterm2_set_tab_rgb 255 230 127; # yellow
elif [[ "${HOST}" == *lxplus* ]]; then iterm2_set_tab_label lxplus ; iterm2_set_tab_rgb 191 190 191 ; # gray
elif [[ "${HOST}" == *local* || "${HOST}" == *laptop* ]]; then iterm2_set_tab_label local ; iterm2_set_tab_default;
else iterm2_set_tab_label "???" ; iterm2_set_tab_default ; fi

alias l='ls -lG'
alias ll='ls -lG'
alias lsa='/bin/ls --color=auto'
alias lk='ls -lthrG'
alias lka='/bin/ls -lthrG --color=auto'
alias lo='ls --group-directories-first -la --sort=extension'
alias afswork='cd /afs/cern.ch/work/n/namin/public/'
alias hdp='cd /hadoop/cms/store/user/namin/ && ls -l'
alias grep='grep --color=auto'
alias ..='cd ..'
alias ,,='echo "$PWD -> $OLDPWD" && cd $OLDPWD'
alias cd..='cd ..'
alias cdl='cd $(ls -1rtd */ | tail -1); lk'
alias bc='bc -l'
alias iroot='command root'
alias root='root -b -l'
alias rot='root -b -l -q -n'
alias voms='voms-proxy-init -hours 168 -voms cms -rfc'
alias brc='vim ~/.bashrc'
alias vrc='vim ~/.vimrc'
alias newvim='~/sandbox/vimslc7/vim/bin/vim'
alias nvim='/home/users/namin/sandbox/neovim/neovim/build/bin/nvim'
alias em='emacs'
alias gam='git commit -a -m'
alias gd='git diff --color | ~/sandbox/diff-so-fancy/diff-so-fancy'
alias gp='git push'
alias gsu='git status --untracked-files=no'
alias glog="git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gc="git commit"
alias usa='source ~/syncfiles/miscfiles/nicer_usa.sh'
alias cond='condor_q $USER'
alias conf='condor_q $USER -nobatch'
alias conda='condor_q -all'
alias cstat='condor_q $USER | col 6 | drop 4 | head -n -2 | stats'
alias cstata='condor_q | col 6 | drop 4 | head -n -2 | stats'
alias dfh='df -h | grep hadoop'
alias xb='xargs -n 1 -I {} sh -c'
alias xbf='xargs -n 1 -P 20 -I {} sh -c'
alias tags='ctags -R --exclude=.git' # make tags recursively, then Ctrl] in vim
alias mountuaf='sshfs namin@uaf-10.t2.ucsd.edu:/home/users/namin /Users/namin/sandbox/uaf  -o Compression=no,follow_symlinks,auto_cache,reconnect,defer_permissions,noappledouble'
alias unmountuaf='sudo umount -f /Users/namin/sandbox/uaf'
alias aria='aria2c -j 6 -s 6 -x 6'
alias v='vim'
alias icl='natsort.py | tail -n 1 | xargs ic'
alias rrnd='rnd "root -l" .root'
alias rndic='rnd ic'
alias crnd='rnd cd'
alias vsp='vim -O'
alias json_to_csv='python -c "import json; import csv; import sys; data = json.load(sys.stdin); output = csv.writer(sys.stdout); output.writerow(data[0].keys()); [output.writerow(row.values()) for row in data]"'
alias xtermcolors='for i in {0..255} ; do printf "\x1b[48;5;%sm%3d\e[0m " "$i" "$i"; if (( i == 15 )) || (( i > 15 )) && (( (i-15) % 6 == 0 )); then printf "\n"; fi; done'

# dirs
if [[ $HOST == *uaf-* ]]; then 
    alias em="/home/users/namin/sandbox/emacs-25.1/src/emacs -nw"
    alias ev="cd /cvmfs/cms.cern.ch/slc6_amd64_gcc530/cms/cmssw/CMSSW_9_2_8; cmsenv; cd -"
    alias ev9="cd /cvmfs/cms.cern.ch/slc6_amd64_gcc530/cms/cmssw/CMSSW_9_2_8; cmsenv; cd -"
    alias ev10="cd /cvmfs/cms.cern.ch/slc7_amd64_gcc630/cms/cmssw/CMSSW_10_2_0_pre6/ ; cmsenv ; cd -"
    alias nano="cd ~/sandbox/noroot/nano/NanoTools/python ; ev9"
    alias ssm="cd ~/2016/ss/master/SSAnalysis/; . setup.sh"
    alias ssan="cd ~/2016/ssan/tex/notes/AN-16-386/trunk;"
    alias ssp="cd ~/2016/ssan/tex/notes/SUS-16-035/trunk;"
    alias sspp="cd ~/2016/ssan/tex/papers/SUS-16-035/trunk;"
    alias ftan16="cd ~/2017/fouran/tex/notes/AN-17-115/trunk;"
    alias ftan="cd ~/2018/fourtop/tex/notes/AN-18-062/trunk;"
    alias ftp="cd ~/2017/fouran/tex/papers/TOP-17-009/trunk;"
    alias ft="cd ~/2017/fourtop; . setup.sh"
    alias ft8="cd ~/2018/fourtop/FTAnalysis/; . setup.sh"
    alias ft80="cd ~/2018/fourtop/80x/FTAnalysis/; . setup.sh"
    alias ft94="cd ~/2018/fourtop/94x/FTAnalysis/; . setup.sh; cd analysis; lk"
    alias ft2018="cd ~/2018/fourtop/run2/FTAnalysis/; . setup.sh; "
    alias ftall="cd ~/2018/fourtop/all/FTAnalysis/; . setup.sh; "
    alias me42="cd ~/2018/me42/plotting; ev9"
    alias gan="cd ~/2017/gan/DY-GAN/gan/ ; ev9"
    alias dis="cd ~/public_html/dis; ls -lrth"
    alias ds="dis_client.py -t snt"
    alias ele="metis; cd ~/2017/ProjectMetis/elemva/CMSSW_8_0_28/src/electronML/Analysis/postprocessing/; source setup.sh; cd ../new/"
    alias metis="cd ~/2017/ProjectMetis; source setup.sh"
    alias mrun="cond -w | grep Metis | col 10 | cut -d'/' -f8 | stats"
    alias lu='lumi_utils.py'
    alias sb='cmsenv; cd $CMSSW_BASE ; scram b -j10; cd -'
    alias mp="./make | tee temp.txt ; cat temp.txt | grep 'PDF Output file:' | cut -d: -f2 | xargs -n 1 -I {} sh -c 'web {}'";
    alias md="grip README.md --export - > ~/public_html/dump/test_README.html && echo 'http://`hostname`/~namin/dump/test_README.html'"
    alias sntcsv='ds "*" --json --detail | json_to_csv'
fi

if [[ "$OSNAME" == "Darwin" ]]; then
    alias mks="cd ~/sandbox/makers; ls -lrth"
    alias metis="cd ~/sandbox/ProjectMetis; source setup.sh"
    alias dump="cd ~/public_html/dump/"
    # alias reloadsound='sudo kextload /System/Library/Extensions/AppleHDA.kext'
    alias reloadsound='sudo launchctl unload /System/Library/LaunchDaemons/com.apple.audio.coreaudiod.plist && sudo launchctl load /System/Library/LaunchDaemons/com.apple.audio.coreaudiod.plist'
    bwf() {
        cd  ~/sandbox/bwf/ 
        python main.py & 
        sleep 1s
        open -a "/Applications/Google Chrome.app" "http://127.0.0.1:5000/workout"
        fg
        cd -
    }
fi

# ssh
alias lxplus='ssh namin@lxplus.cern.ch'
alias fino='ssh namin@uafino.physics.ucsb.edu'
alias squark='ssh namin@squark.physics.ucsb.edu'
alias pi='ssh pi@192.168.0.21'
alias ela='ssh namin@ela.cscs.ch'
alias daint='ssh daint'
alias stats='~/syncfiles/pyfiles/stats.py'
alias histo='~/syncfiles/pyfiles/histo.py'
alias killssh='ps aux | grep ssh | grep localhost | col 2 | xargs kill -9'
alias tunnel80='ssh -N -f -L localhost:8880:localhost:8880 uaf-1.t2.ucsd.edu'
alias tunnel90='ssh -N -f -L localhost:8890:localhost:8890 uaf-1.t2.ucsd.edu'
alias tunnel92='ssh -N -f -L localhost:8892:localhost:8892 uaf-1.t2.ucsd.edu'
alias tunnel93='ssh -N -f -L localhost:8893:localhost:8893 uaf-1.t2.ucsd.edu'

export HISTSIZE=1000000
export HISTFILESIZE=1000000
export HISTCONTROL=ignoreboth

shopt -s cmdhist #(combine multiline commands)
shopt -s histappend #(multiple terminals all save to history)

export PYTHONPATH="$HOME/syncfiles/pyfiles:${PYTHONPATH}"
export PYTHONPATH="$HOME/syncfiles:${PYTHONPATH}"
# Fix spelling errors for cd
shopt -s cdspell
unset MAILCHECK
alias d='cd ~/desktop/'

pathadd(){
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then PATH="${PATH:+"$PATH:"}$1"; fi
    if [ -d "$1" ] && [[ ":$PYTHONPATH:" != *":$1:"* ]]; then PYTHONPATH="${PYTHONPATH:+"$PYTHONPATH:"}$1"; fi
    if [ -d "$1" ] && [[ ":$LD_LIBRARY_PATH:" != *":$1:"* ]]; then LD_LIBRARY_PATH="${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH:"}$1"; fi
}

pkldump() {
   python -c "with open('"$1"','r') as fhin: __import__('pprint').pprint(__import__('pickle').load(fhin)$2)"
}

npdump() {
   python -c "data = __import__('numpy').load('"$1"'); print data.shape; print data"
}
npzdump() {
   python -c "data = __import__('numpy').load('"$1"'); print '\n'.join(['-- {}, shape {}\n\t{}'.format(k,data[k].shape,data[k]) for k in data])"
}

pddump() {
   python -c "print __import__('pandas').DataFrame(__import__('numpy').load('"$1"')).head()"
}

wifi() {
if [[ "$OSNAME" == "Darwin" ]]; then
    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s
fi
}

first() {
    dirnames=$(dis_client.py -t snt $1 | grep location | cut -d ':' -f2)
    for dirname in "$dirnames"; do
        ls -lrth $dirname/* | grep -v total | head -n 1
    done
}

rnd() {
    local nthf=${3:-1}
    if [[ -z $2 ]]; then
        local rndf=`ls -ltr | awk '{if ($5 != 0) print $9}' | tail -n $nthf | head -n 1`
    elif [[ $2 == "*/*" ]]; then
        local rndf=`ls -ltr *${2}* | awk '{if ($5 != 0) print $9}' | tail -n $nthf | head -n 1`
    else
        local rndf=`ls -ltr | grep ${2} | awk '{if ($5 != 0) print $9}' | tail -n $nthf | head -n 1`
    fi
    if [[ $rndf != "" ]]; then
        echo "$1 $rndf"
        $1 $rndf
        history -s "$1 $rndf"
    else
        echo "Fail to find any random file."
    fi
}

cl() {
    if [[ -z $1 ]]; then
        ls -ltrhG
    elif [[ -d $1 ]] || [[ $1 == '-' ]]; then
        cd $1 && ls -ltrhG
    elif [[ -f $1 ]]; then
        cd $(dirname $1) && ls -ltrhG
    else
        local des=$(echo $1 | cut -d'/' --complement -f2-)
        if [[ -d $des ]]; then
            cd $des && ls -ltrhG
            echo "\"$1\" is not a directory or file, went to \"$des\" instead"
        else
            echo "$1: No such directory or file"; return 1
        fi
    fi
}

kajobs() {
    local pid=$(jobs -p)
    if [ -n "${pid}" ]; then
        kill -9 $pid
    fi
}

tree() {
    if [[ "$OSNAME" == "Darwin" ]]; then
        tree_osx -C
    else
        tree -C
    fi
}

function hdu() {
    echo $@ | sed 's#/hadoop##g' | xargs hadoop fs -du -h
}

function hdur() {
    echo $@ | sed 's#/hadoop##g' | xargs hadoop fs -du
}

function hcorrupt() {
    for thing in `echo $@ | sed 's#/hadoop##g'`; do
        hdfs fsck $thing | grep "CORRUPT blockpool" | grep "/cms/store" | cut -d ':' -f 1
    done
}

function myram() {
    user=$USER
    if [ ! -z "$1" ]; then user="$1"; fi
    # stolen from https://superuser.com/questions/102005/how-can-i-display-the-memory-usage-of-each-process-if-i-do-a-ps-ef
    echo "------------------------------------" && mem=0 && while read -r rss comm ; do mbs=$((rss/1024)); mem=$((mbs + mem)); echo $mbs"MB - $comm"; done <<< "$(ps -u ${user} -wo rss=,comm= --sort -rss)" && echo "------------------------------------" && echo $mem"MB: Memory used by user '${user}'"
}

function mjobs() {
    conf -w -const 'taskname =!= UNDEFINED' | grep hadoop | col 10 | pyline.py 'x.split("_Tune")[0].split("_13TeV")[0].split("_MINIAOD")[0].rstrip("/").rsplit("/")[-1]' | stats
}

function mjobsr() {
    conf -w -const 'taskname =!= UNDEFINED' | grep hadoop | grep " R " | col 10 | pyline.py 'x.split("_Tune")[0].split("_13TeV")[0].split("_MINIAOD")[0].rstrip("/").rsplit("/")[-1]' | stats
}

function mailme() {
if [ $? -eq 0 ]
then str="[UAFNotify] Command ended SUCCESSFULLY on $(date) with status code $?"
else str="[UAFNotify] Command FAILED on $(date) with return value $?"
fi
if [ ! -z "$1" ]; then str="[UAFNotify] $1"; fi
str=$(echo $str | sed 's/:/./g')
echo "$(pwd) $(ls -lthr)" | mail -s "$str" amin.nj@gmail.com
}
function utc {
    if [[ "$OSNAME" == "Darwin" ]]; then
        date -r $1
    else
        date -d "1970-01-01 $1 sec UTC"
    fi
}

function show_and_add_to_clipboard {
    if [ -n "$WINDOW" ]; then
        echo -e "\033P\033\033]1337;CopyToClipboard=;\aIWANTTOCOPYTHISNOW\033\033]1337;EndCopy\a\033\\" # for screen
        # echo -e "\033Ptmux;\033\033]1337;CopyToClipboard=;\aIWANTTOCOPYTHIS\033\033]1337;EndCopy\a\033\\" # for tmux
    else
        echo -e "\033]1337;CopyToClipboard=;\a$@\033]1337;EndCopy\a" # for normal term
    fi
}

function shorten_url {
    curl -s "https://git.io/create" --data "url=$1" | sed "s#^#https://git.io/#" | while read data; do show_and_add_to_clipboard $data; done
}

function pg {
    PWD1=`pwd`
    PWD2=$1
    cmd="readlink"
    if [[ "$OSNAME" == "Darwin" ]]; then
        cmd="greadlink"
    fi
    if [ -e $PWD1/$PWD2 ] ; then
        PWD3=$PWD1/$PWD2
        if [ -z $NOCLIP ]; then
            show_and_add_to_clipboard `$cmd -f $PWD3`
        else
            echo `$cmd -f $PWD3`
        fi
    else
        if [ -e $PWD2 ]; then 
            if [ -z $NOCLIP ]; then
                show_and_add_to_clipboard `$cmd -f $PWD2`
            else
                echo `$cmd -f $PWD3`
            fi
        fi
    fi
}
export -f pg

function pic {
    tmp=$(NOCLIP=1 pg $1)
    one="MY"
    two="IMGCAT"
    echo -n "${one}_${two} ${tmp}"
    sleep 0.01s;
    echo -e "\rx"
}
export -f pic

function sc {
inpName=$1
for att in $(screen -ls | grep Attached | awk '{print $1}'); do
    id=$att
    att=${att##*.}
    [ -z "$inpName" ] && echo "Attached: $att"
    if [[ $inpName == $att ]]; then
        echo "Can't attach $att because it's already open"
        return
    fi
done
for det in $(screen -ls | grep Detached | awk '{print $1}'); do
    id=$det
    det=${det##*.}
    [ -z "$inpName" ] && echo "Detached: $det"
    if [[ $inpName == $det ]]; then
        screen -r $id
        return
    fi
done
if [ ! -z "$inpName" ]; then
    echo "No screens found with that name. Making one!"
    screen -S $inpName
fi
}
# and also do the autocompletions for screens! :)
_screenscomp() {
    screennames=$(sc | grep ":" | cut -d ' ' -f2)
    COMPREPLY=( $(compgen -W "${screennames}" -- ${COMP_WORDS[COMP_CWORD]}) )
}
complete -F _screenscomp sc

function cw {
    # condor_q $USER -const 'JobStatus==2' -l | grep MATCH_GLIDEIN_SiteWMS_Slot | cut -d'@' -f2 | cut -d'"' -f1 | sort
    condor_q $USER $1 -const 'JobStatus==2' -l | grep RemoteHost | rev | cut -d '@' -f1 | rev | cut -d '"' -f1 | cut -d '-' -f1
}
function cwh {
    cw | cut -d'-' -f1 | stats
}
function cweach {
    condor_q $USER $1 -const 'JobStatus==2' -l | grep -E "(^ClusterId =|RemoteHost)" | cut -d '=' -f2 | xargs -n 2
}

function clog {
    num=20
    # if number is less than 10k, then it can't be a condor_id, so
    # use it as the number of entries to show, otherwise use it
    # as condor_id
    if [ $# -gt 0 ]; then 
        num=$(echo $1 | sed 's/\..*//')
    fi
    if  [[ $# -gt 0 && "$num" -gt 10000 ]]; then
        temp_file=$(mktemp)
        jobid=$1
        # condor_history $USER -limit $num | grep $jobid
        # condor_history $USER -limit 100 | grep $jobid
        condor_history -l $jobid -limit 1 > $temp_file
        iwd=$(cat $temp_file | grep "^Iwd" | cut -d\" -f2)
        out=$(cat $temp_file | grep "^Out" | cut -d\" -f2)
        err=$(cat $temp_file | grep "^Err" | cut -d\" -f2)
        [[ "$out" == "/"* ]] || out=${iwd}/${out}
        [[ "$err" == "/"* ]] || err=${iwd}/${err}
        echo $out
        echo $err
        vim -O $out $err
        rm $temp_file
    else
        # condor_history $USER -limit 100
        condor_history $USER -limit $num
    fi
}

function condh {
    condor_q -l $1 | grep -i "hold"
}

function drop {
# drops the first n lines
if [ $# -lt 1 ]; then
    echo "usage: drop <drop #>"
    return 1
fi
n=$1
tail --lines=+$((n+1))
}

function col {
if [ $# -lt 1 ]; then
    echo "usage: col <col #>"
    return 1
fi
num=$1

if [[ $num -lt 0 ]]; then 
    awk "{print \$(NF+$((num+1)))}"
else
    awk -v x=$num '{print $x}'
fi
}

function xcp {
dest="."
if [ $# -gt 1 ]; then
    dest=$2
fi
echo xrdcp root://xrootd.unl.edu/$1 $dest
xrdcp root://xrootd.unl.edu/$1 $dest
}
# export so this can be used in other scripts
export -f xcp

function gamp {
msg=$@
git commit -a -m $msg
git push
}

function branches {
# dumps branches of root file
if [ $# -gt 1 ]; then
    stuff='("'$1'","'$2'")'
else
    stuff='("'$1'")'
fi
    
eval "root -b -q -l '~/syncfiles/miscfiles/branches.C${stuff}' | grep branch: | cut -d ' ' -f2"
}
export -f branches

function tb {
root.exe -l $* ~/syncfiles/miscfiles/browser.C -dir $(pwd)
}

function watchjob {
njobs=$(echo $@ | wc -w)
echo "Will email you when the $njobs job(s) $@ finish(es)"
nohup ~/syncfiles/miscfiles/watchjob.sh $@ &
}

function hdpfilelist {
hadoop fs -du -s /cms/store/user/${USER}/*
}

function ucsd {
if [ $# -lt 1 ]; then
    ssh namin@uaf-10.t2.ucsd.edu
else
    ssh namin@uaf-${1}.t2.ucsd.edu
fi
}

function extract {
if [ -f $1 ] ; then
    case $1 in
        *.tar.bz2)   tar xvjf $1    ;;
        *.tar.gz)    tar xvzf $1    ;;
        *.tar.xz)    tar xvf $1    ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar x $1       ;;
        *.xz)        unxz x $1       ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xvf $1     ;;
        *.tbz2)      tar xvjf $1    ;;
        *.tgz)       tar xvzf $1    ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)           echo "don't know how to extract '$1'..." ;;
    esac
else
    echo "'$1' is not a valid file!"
fi
}

function switch_git_to_ssh {
    username=$(git remote -v | grep "http" | grep "(push)" | cut -d '/' -f4)
    repo=$(git remote -v | grep "http" | grep "(push)" | cut -d '/' -f5 | cut -d ' ' -f1)
    [ ! -z $username ] && git remote set-url origin git@github.com:${username}/${repo}.git || echo "Already switched to ssh?"
}

function copy_from_there_to_here {
    for thing in `ls *`; do cp $1/$thing .; done
}

function web {
if [ $# -gt 0 ]; then
    chmod -R a+r $@
    extra=""
    if [[ ! -z "$WEBDIR" ]]; then
        extra="${WEBDIR}/"
    fi
    if [[ $(hostname) == *uaf-* ]]; then 
        cp -rp $@ ~/public_html/dump/
        for file in "$@"; do
            echo "${HOSTNAME}/~${USER}/dump/$extra$(basename $file)"
        done
    else
        scp -rp $@ ${USER}@uaf-10.t2.ucsd.edu:~/public_html/dump/$extra/
        for file in "$@"; do
            echo "uaf-10.t2.ucsd.edu/~${USER}/dump/$extra$(basename $file)"
        done
    fi
else
    echo "Usage: web <input files>"
fi
}
export -f web

function web_plots { WEBDIR=plots web $@ ; }
export -f web_plots

function web_slides { WEBDIR=slides web $@ ; }
export -f web_slides

function web_misc { WEBDIR=misc web $@ ; }
export -f web_misc

function web_doc { WEBDIR=documents web $@ ; }
export -f web_doc

function uls {
    # upload latest slides
    web_slides $(ls -1rth ~/Desktop/Slides/*pdf | tail -1)
}

function rweb {
if [ $# -gt 0 ]; then
    chmod -R a+r $1
    if [[ $(hostname) == *uaf-* ]]; then 
        # cp -rp $1 ~/public_html/dump/jsroot/files/
        ln -s -f $(pwd)/$1 ~/public_html/dump/jsroot/files/
    else
        scp -rp $1 ${USER}@uaf-8.t2.ucsd.edu:~/public_html/dump/jsroot/files/
    fi
    for file in "$1"; do
        echo "http://uaf-8.t2.ucsd.edu/~${USER}/dump/jsroot/index.htm?file=files/$(basename $file)"
    done
else
    echo "Usage: rweb <input root files>"
fi
}
export -f rweb

function niceplots {
. ~/syncfiles/miscfiles/niceplots.sh $@
}
export -f niceplots
# can also call as 
# $ NOCONVERT=true niceplots blah blah
# to not convert pdf->png

function myip {
    curl "http://icanhazip.com/"
}

function multiply_defined_labels {
    # inside a cms svn repo, this will find figure labels
    # that have been multiply defined (i.e., uniq -c > 1)
    grep label *tex | grep -v "%" | pyline.py 'x.split("label{")[-1].split("}")[0]' | sort  | uniq -c | sort -n
}

function remove_preliminary() {
    rename_pdf "Preliminary" "" $@
}
export -f remove_preliminary
function rename_pdf() {
    oldtext="$1"
    newtext="$2"
    shift
    shift
    for pdffile in $@; do
        echo "Processing $pdffile..."
        cp $pdffile $pdffile.bak
        pdftk $pdffile output $pdffile.tmp uncompress
        rm $pdffile
        # the LANG=C hack may or may not be needed
        LANG=C && sed -i -e "s/$oldtext/$newtext/g" $pdffile.tmp
        pdftk $pdffile.tmp output $pdffile compress
        rm -f $pdffile.tmp
        rm -f $pdffile.tmp-e
    done
}
export -f rename_pdf

function simulation_to_sp() {
    oldtext=Simulation
    newtext="Simulation Preliminary"
    for pdffile in $@; do
        echo "Processing $pdffile..."
        cp $pdffile $pdffile.bak
        pdftk $pdffile output $pdffile.tmp uncompress
        rm $pdffile
        # the LANG=C hack may or may not be needed
        LANG=C && sed -i -e "s/$oldtext/$newtext/g" $pdffile.tmp
        pdftk $pdffile.tmp output $pdffile compress
        rm -f $pdffile.tmp
        rm -f $pdffile.tmp-e
    done
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
if [ -d ~/.bash_completion.d ]; then
  for file in ~/.bash_completion.d/*; do
    . $file
  done
fi
