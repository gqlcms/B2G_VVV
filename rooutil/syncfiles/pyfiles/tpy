#!/usr/bin/env python

import os
import signal
import sys
import argparse
import glob
import code
import traceback
import datetime

import ROOT as r

import prompt_toolkit as pt
from prompt_toolkit import prompt
from prompt_toolkit.auto_suggest import AutoSuggestFromHistory
from prompt_toolkit.contrib.completers import WordCompleter
from prompt_toolkit.enums import EditingMode
from prompt_toolkit.history import FileHistory
from prompt_toolkit.key_binding.defaults import load_key_bindings_for_prompt
from prompt_toolkit.keys import Keys
from prompt_toolkit.styles import style_from_dict
from prompt_toolkit.styles.from_pygments import style_from_pygments
from prompt_toolkit.token import Token

from pygments.styles import get_style_by_name
from pygments.lexers.python import PythonLexer
from pygments.lexers.c_cpp import CppLexer
from pygments.token import Name, Keyword

ROOT_KEYWORDS = ["TH1F","TH2F","TH1D","TH2D","TProfile", "TF1", "TGraph", "TLorentzVector",
    "TPad", "TLegend", "TObject", "TText", "TLatex", "TFile", "TChain", "TTree"]

class Command(object):
    def __init__(self,cmdstr="", mode="python"):
        self.cmdstr = cmdstr
        self.mode = mode
    def get_python_str(self):
        if self.mode == "python":
            return self.cmdstr
        else:
            return """r.gInterpreter.ProcessLine("{}") # {}""".format(
                    self.cmdstr.replace('"',r"\""),
                    self.cmdstr,
                    )
    def __repr__(self):
        return "<{} command: {}>".format(self.mode,self.cmdstr)

def get_style(name="native"):
    style = style_from_pygments(style_cls=get_style_by_name(name),style_dict={
        Token.Toolbar: 'reverse',
        })

class MyPythonLexer(PythonLexer):
    EXTRA_KEYWORDS = set(ROOT_KEYWORDS)
    def get_tokens_unprocessed(self, text):
        for index, token, value in PythonLexer.get_tokens_unprocessed(self, text):
            if token is Name and value in self.EXTRA_KEYWORDS:
                yield index, Keyword.Type, value
            else:
                yield index, token, value

class MyCppLexer(CppLexer):
    EXTRA_KEYWORDS = set(ROOT_KEYWORDS)
    def get_tokens_unprocessed(self, text):
        for index, token, value in CppLexer.get_tokens_unprocessed(self, text):
            if token is Name and value in self.EXTRA_KEYWORDS:
                yield index, Keyword.Type, value
            else:
                yield index, token, value

def get_treename_from_file(tfile):
    """
    Given a tfile, this returns the name of the (only) ttree in the file, or
    "Events" in the case of MINIAOD
    """
    f1 = r.TFile.Open(tfile)
    keys = f1.GetListOfKeys()
    treenames = [key.GetName() for key in keys if key.ReadObj().InheritsFrom(r.TTree.Class())]
    if len(treenames) > 1 and "Events" in treenames: treename = "Events"
    else: treename = treenames[0]
    return treename

def get_branch_info(ch):
    branches = list(ch.GetListOfBranches())
    # branches = list(ch.GetListOfLeaves())
    tree = ch.GetTree()
    aliases = tree.GetListOfAliases()
    d_bname_to_info = {}
    if not not aliases:
        for a in aliases:
            aname = a.GetName()
            branch = tree.GetBranch(tree.GetAlias(aname))
            branchname = branch.GetName()
            cname = branch.GetClassName()
            btitle = branch.GetTitle()
            d_bname_to_info[branchname] = {"alias":aname.replace(".",""), "class": cname, "title": btitle, "branch":branch}
    else:
        for branch in branches:
            branchname = branch.GetName()
            cname = branch.GetClassName()
            btitle = branch.GetTitle()
            d_bname_to_info[branchname] = {"alias":branchname, "class": cname, "title": btitle, "branch":branch}
    for bn in d_bname_to_info:
        typ = ""
        d_bname_to_info[bn]["type"] = typ
        cname = d_bname_to_info[bn]["class"]

        if bn in ["EventSelections", "BranchListIndexes", "EventAuxiliary", "EventProductProvenance"]: continue

        if "edm::TriggerResults" in cname:
            continue

        # sometimes root is stupid and gives no class name, so must infer it from btitle (stuff like "btag_up/F")
        if not cname:
            if btitle.endswith("/i"): cname = "unsigned int"
            elif btitle.endswith("/l"): cname = "unsigned long long"
            elif btitle.endswith("/F"): cname = "float"
            elif btitle.endswith("/I"): cname = "int"
            elif btitle.endswith("/O"): cname = "bool"
            elif btitle.endswith("/D"): cname = "double"

            typ = cname[:].strip()

        else:
            if "edm::Wrapper" in cname:
                typ = cname.replace("edm::Wrapper<","")[:-1].strip()

        d_bname_to_info[bn]["type"] = typ

    return d_bname_to_info

def cat():
    if(r.gPad):
        c1 = r.gPad
        c1.SaveAs("temp.pdf")
        os.system("ic temp.pdf")

if __name__ == "__main__":

    parser = argparse.ArgumentParser()

    parser.add_argument("fpatt", help="input file(s), quoted if there are wildcards", nargs="?", default=None)
    parser.add_argument("-t", "--tree", help="tree name", default=None)
    args = parser.parse_args()

    commands = []

    if args.fpatt:
        tree_name = args.tree
        fpatt = args.fpatt
        if os.path.isdir(fpatt): fpatt += "/*.root"
        if not tree_name:
            if fpatt.startswith("/store/"):
                tree_name = "Events"
            else:
                first = fpatt[:] if "*" not in fpatt else glob.glob(fpatt)[0]
                tree_name = get_treename_from_file(first)
                print "Found tree {}".format(tree_name)

        if fpatt.startswith("/store/"):
            fpatt = "root://cmsxrootd.fnal.gov//{}".format(fpatt)

        ch = r.TChain(tree_name)
        if ".root" in fpatt:
            ch.Add(fpatt)
        else:
            ch.Add("{}/*.root".format(fpatt))

        # make alias
        short_tree_name = tree_name.rsplit("/",1)[-1]
        to_exec = "{} = ch".format(short_tree_name)
        exec(to_exec)
        commands.append(Command("import ROOT as r","python"))
        commands.append(Command("ch = r.TChain(\"{}\")".format(ch.GetName()),"python"))
        for x in ch.GetListOfFiles():
            commands.append(Command("ch.Add(\"{}\")".format(x.GetTitle()),"python"))
        commands.append(Command(to_exec,"python"))

        binfo = get_branch_info(ch)
        meta_dict = {bi["alias"]:bi["type"] for bi in binfo.values()}
        bnames = [bi["alias"] for bi in binfo.values()]

        print "Attached tree {} with {} branches".format(short_tree_name, len(bnames))
    else:
        bnames = []
        meta_dict = {}


    ### Prompt stuff now

    mode = "python"
    registry = load_key_bindings_for_prompt()

    MyCompleter = WordCompleter(bnames,
            # ignore_case=True,
            # match_middle=True,
            meta_dict=meta_dict,
            )

    @registry.add_binding(u',', u',')
    def _switchmode(event):
        global mode
        if mode == "root": mode = "python"
        else: mode = "root"


    # Hack since this isn't included? or what? https://github.com/jonathanslenders/python-prompt-toolkit/commit/fa39f42a5ff402a5f71c82c32d070cbb190d97c0
    @registry.add_binding(Keys.ControlZ)
    def _suspend(event):
        os.kill(os.getpid(), signal.SIGTSTP)

    style = get_style()
    command_number = 0


    while 1:
        try:

            inp = prompt(
                    message=u"",
                    history=FileHistory(".history.txt"),
                    auto_suggest=AutoSuggestFromHistory(),
                    completer=MyCompleter,
                    lexer=(MyPythonLexer if mode == "python" else MyCppLexer),
                    key_bindings_registry=registry,
                    extra_input_processors=[
                        pt.layout.prompt.DefaultPrompt(lambda _: [
                            (Token.Prompt, u">>> " if mode == "python" else u"root [{}] ".format(command_number))]
                            ),
                        ],
                    # get_bottom_toolbar_tokens=get_bottom_toolbar_tokens,
                    get_bottom_toolbar_tokens=lambda _: [(Token.Toolbar,'[,, to toggle] {} mode'.format(mode.upper()))],
                    # editing_mode=EditingMode.VI,
                    # style=get_style(),
                    style = style_from_pygments(style_cls=get_style_by_name("monokai"),style_dict={
                        Token.Toolbar: 'reverse',
                        }),
           )

            to_exec = inp[:].strip()
            do_cat = False

            # Break out in python or root if .q
            if to_exec == ".q": break

            # Keep track of command number if not empty
            if to_exec: command_number += 1

            # If Drawing with >1 var, don't cat() if col not specified
            if "Draw(" in inp:
                do_cat = True
                if inp.count(":") > 1 and "col" not in inp:
                    do_cat = False


            # Execute differently depending on python or root, and augment command registry
            if mode == "python":
                exec code.compile_command(to_exec)
                if to_exec: commands.append(Command(to_exec,"python"))
            else:
                r.gInterpreter.ProcessLine(to_exec)
                if to_exec: commands.append(Command(to_exec,"root"))

            # Do a cat
            if do_cat: cat()

        except KeyboardInterrupt as e: # Ctrl-C
            pass

        except EOFError as e: # Ctrl-D
            break

        except Exception as e:
            traceback.print_exc()

    with open(".tpyhist.py", "a") as fhout:
        fhout.write("# session: {}\n".format(str(datetime.datetime.now())))
        fhout.write("\n".join(map(lambda x: x.get_python_str(), commands)))
        fhout.write("\n\n")
    print "Appended {} commands to {}".format(len(commands), ".tpyhist.py")
