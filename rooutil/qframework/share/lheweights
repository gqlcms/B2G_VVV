#!/bin/env python

import argparse
import csv
import sys
import xml.etree.ElementTree as ET

class Particle:
    def __init__(self,line):
        s = line.split()
#        print("line:"+(",".join(s)))
        self.IDUP,self.ISTUP,self.MOTHUP1,self.MOTHUP2,self.ICOLUP1,self.ICOLUP2 = map(int,s[:6])
        self.PUP1,self.PUP2,self.PUP3,self.PUP4,self.PUP5,self.VTIMUP,self.SPINUP = map(float,s[6:])
            
class Event:
    def setEvent(self,line):
        s = line.split()
#        print("line:"+(",".join(s)))
        self.NUP,self.IDPRUP = map(int,s[:2])
        self.XWGTUP,self.SCALUP,self.AQEDUP,self.AQCDUP = map(float,s[2:])
            
    def __init__(self,text):
        self.particles = []
        lines = text.strip().split("\n")
        self.setEvent(lines[0])
        for line in lines[1:]:
            if line:
                self.particles.append(Particle(line))
    

def hashFXX(evt):
    v = 1
    for p in evt.particles:
        if p.ISTUP == -1:
            v = v * p.PUP3
    return abs(v)
def hashQCD(evt):
    return evt.AQCDUP
def hashQED(evt):
    return evt.AQEDUP
            

def main(args):
    idmap = {}
    
    # read the map file
    if args.map:
        with open(args.map) as mapfile:
            for line in mapfile.readlines():
                s = line.strip()
                if not s: continue
                parts = s.split(" ")
                idmap[parts[0]] = parts[1]
    # fill the idmap if required
    if not idmap:
        lhefile = args.input[0]
        tree = ET.parse(lhefile)
        xmlroot = tree.getroot()
        event = xmlroot.find("event")
        weights = event.find("rwgt")
        for weight in weights.findall("wgt"):
            id = weight.attrib["id"]
            idmap[id] = id

    # determine hashing if requested
    if args.hashf == "FXX":
        hashf = hashFXX
    elif args.hashf == "QCD":
        hashf = hashQCD
    elif args.hashf == "QED":
        hashf = hashQED
    else:
        hashf = None

    # open output stream
    if args.output == "-":
        csvfile = sys.stdout
    else:
        csvfile =  open(args.output, 'wb')
    writer = csv.writer(csvfile, delimiter=args.delim,quotechar="'", quoting=csv.QUOTE_MINIMAL)
    row = [args.eventnumber]
    if hashf:
        row.append(args.hashf)
    writer.writerow(row + idmap.values())
        
    # loop over the files
    evtno = 0
    done = False
    for lhefile in args.input:
        tree = ET.parse(lhefile)
        xmlroot = tree.getroot()
        # loop over the events
        for event in xmlroot.findall("event"):
            weights = event.find("rwgt")
            row = [evtno]
            if hashf:
                evt = Event(event.text)
                row.append(hashf(evt))
            writer.writerow(row + [float(weight.text) for weight in weights.findall("wgt") if weight.attrib["id"] in idmap.keys()])
            evtno = evtno +1
            if args.nevents > 0 and args.nevents < evtno:
                done=True
                break
        if done:
            break

    # close output stream
    if args.output != "-":
        csvfile.close()
    
if __name__ == "__main__":
    # parse the CLI arguments
    parser = argparse.ArgumentParser(description='convert a LHE reweight file as produced by MG5 into a csv file')
    parser.add_argument('--input', "-i", metavar='events.lhe', type=str, nargs='*', required=True, help='the list of input files')
    parser.add_argument('--map', "-m", metavar='mapping.txt', type=str, default="", help='a mapping for the reweightings')
    parser.add_argument('--nevents', "-n", metavar='N', type=int, default=-1, help='maximum number of events to read')
    parser.add_argument('--eventnumber', "-e", metavar='EvtNo', type=str, default="EventNumber", help='name of the event number branch')
    parser.add_argument('--output', "-o", metavar='filename.csv', type=str, default="weights.csv", help='name of the CSV file')
    parser.add_argument('--delimiter', "-d", metavar='del', dest="delim",type=str, default=" ", help='delimiter for CSV file (default: space)')
    parser.add_argument('--hash',metavar="HASHMODE",dest="hashf",type=str,default="",help="calculate event hashes. may be FXX, AQCD, AQED")
    args = parser.parse_args()
    main(args);
