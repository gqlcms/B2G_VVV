#!/bin/bash

if [ -z "$TMPDIR" ]; then
    TMPDIR=/tmp/$(whoami)
    mkdir -p $TMPDIR
fi

files=()
filecnt=0

WORKDIR=$(pwd)/

silent=false
quiet=false
loadSampleFolders=false
loadFolders=false
makeReaders=false
loadStatisticsLibrary=false
openWritable=false
if [ -z "$DISPLAY" ]; then
    batch=true
else
    batch=false
fi

for arg in "$@"; do
    case $arg in 
	      "-sf")  loadSampleFolders=true ;;
	      "-f")   loadFolders=true ;;
	      "-sfr") loadSampleFolders=true; makeReaders=true ;;
	      "-w")	openWritable=true ;;
	      "-qq")	silent=true ; quiet=true;;
	      "-q")	quiet=true ;;
	      "-b") batch=true ;;
	      *)      files[$filecnt]=$arg; filecnt=$( expr $filecnt + 1 ) ;;
    esac
done


if [ -z "$TQPATH" ]; then
    TQPATH=$(cd $(dirname "${0%/*}") && pwd )  # absolutized and normalized
    echo "tqroot is a wrapper for root, auto-loading the CAF libQFramework.so"
    echo "in order to work correctly, it needs the TQPATH environment variable set to the CAF trunk"
    echo "you can achieve this by adding the following line to your shell init script (e.g. .bashrc)"
    echo -e "\texport TQPATH=$TQPATH"
    echo "afterwards, you can safely move the tqroot script to any location in your file system"
fi

if [ -f $TQPATH/libQFramework.so ]; then
    LIBPATH=$TQPATH/libQFramework.so
elif  [ -f $TQPATH/../../build/QFramework/libQFramework.so ]; then
    LIBPATH=$TQPATH/../../build/QFramework/libQFramework.so
else
    if [ -n "$ROOTCOREBIN" ]; then
        LIBPATH=$ROOTCOREBIN/obj/$ROOTCORECONFIG/QFramework/lib/libQFramework.so        
    else
        echo "you don't seem to have a compiled libQFramework.so"
        echo "    in $TQPATH/lib"
        echo "please 'cd $TQPATH' and 'make'!"
        exit;
    fi
fi

if [[ $(root-config --version | cut -d . -f 1) == 6 ]]; then
    ISROOT6=true
else
    ISROOT6=false
fi

if [ -f $TQPATH/.libdirs ]; then
    for line in $(sort -u $TQPATH/.libdirs); do
	      export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$line
    done
fi

rootexists=$(hash root-config 2>/dev/null; if [ $? -eq 0 ]; then echo true; fi)

if [ -f $TQPATH/.thisroot ] && [ ! $quiet ]; then
    THISROOT=$(cat $TQPATH/.thisroot)
    if [ -f $TQHISROOT ]; then
	      if [ -n "$rootexists" ] &&  [[ "$(root-config --bindir)/thisroot.sh" == "$THISROOT" ]]; then
	          echo "using current root version "$(root-config --version)
	      else
	          source $THISROOT
	          echo "using root version "$(root-config --version)
	      fi
    fi
fi

rootexists=$(hash root-config 2>/dev/null; if [ $? -eq 0 ]; then echo true; fi)

if [ -z "$rootexists" ]; then
    echo "sorry, tqroot is only a wrapper for root"
    echo "you don't seem to have a suitable root distribution active currently"
    echo "please set a valid root version (5.34/03 or later) and try again"
    exit;
fi

fname=$TMPDIR/tqroot.C
cat <<EOF > $fname
{
gPrintViaErrorHandler = kTRUE;
gErrorIgnoreLevel = kWarning;
}
EOF



echo '{' > $fname

if [ -n "$ROOTCOREDIR" ]; then
    if $ISROOT6; then
        echo -e '{ gROOT->ProcessLine(".x $ROOTCOREDIR/scripts/load_packages.C");\ngROOT->ProcessLine(".x tqroot.C");}' > $TMPDIR/rootlogon.C
    else
        echo 'gROOT->ProcessLine(".x $ROOTCOREDIR/scripts/load_packages.C");' >> $TMPDIR/tqroot.C
    fi
else
    if $ISROOT6; then
        echo -e '{ gROOT->ProcessLine(".L '$LIBPATH'"); \ngROOT->ProcessLine(".x tqroot.C");}' > $TMPDIR/rootlogon.C
    else
        echo 'gROOT->ProcessLine(".L '$LIBPATH'");' >> $TMPDIR/tqroot.C
    fi
fi

if $quiet; then
    echo 'TQLibrary::redirect("/dev/null");' >> $fname
fi

echo 'TQLibrary::getQLibrary()->setApplicationName("TQROOT shell");' >> $fname

if $quiet; then
    echo 'TQLibrary::restore();' >> $fname
fi

echo 'TString wd = "'$WORKDIR'";'>> $fname
echo 'TString tqpath = "'$TQPATH'";'>> $fname

echo 'TQLibrary::getQLibrary()->setWorkingDirectory(wd);'>> $fname

if [ $filecnt -gt 1 ]; then
    multifile=true
else
    multifile=false
fi
filecnt=0
for file in ${files[*]}; do
    if [ -f $file ]; then
	      if [[ $file == */* ]]; then
	          dirname=$(cd ${file%/*} > /dev/null; pwd)
	      else
	          dirname=$(pwd)
	      fi
	      infilename=${file##*/}
	      infile=$dirname/$infilename
    else
	      echo "sorry, no such file: "$file
	      continue
    fi
    if [[ $file == *.root ]]; then
	      if $openWritable; then
	          echo 'TFile* _file'$filecnt' = TFile::Open("'$infile'","UPDATE");' >> $fname
	      else
	          echo 'TFile* _file'$filecnt' = TFile::Open("'$infile'","READ");' >> $fname
	      fi
	      echo 'std::cout << "attached file '$infile' as _file'$filecnt'" << std::endl;' >> $fname
	      if $loadSampleFolders; then
	          sflist=$(python2 $TQPATH/share/listSampleFolders.py $file 2>/dev/null)
	          for sf in $sflist; do
		            if $multifile ; then
		                sfname=$(echo ${sf}_${filecnt} | sed 's/[^a-zA-Z0-9_]//g')
		            else
		                sfname=$(echo $sf | sed 's/[^a-zA-Z0-9_]//g')
		            fi
	   	          echo 'TQSampleFolder* '$sfname' = TQSampleFolder::loadLazySampleFolder("'$infile':'$sf'");' >> $fname
		            if $makeReaders; then
		                echo 'TQSampleDataReader* r_'$sfname' = new TQSampleDataReader('$sf');' >> $fname
	   	              echo 'std::cout << "\tattached TQSampleFolder '$sfname' with reader r_'$sfname'" << std::endl;' >> $fname
		            else
	   	              echo 'std::cout << "\tattached TQSampleFolder '$sfname'" << std::endl;' >> $fname
		            fi
	          done
	      fi
	      if $loadFolders; then
	          flist=$($TQPATH/share/listFolders.py $file 2>/dev/null)
	          for sf in $flist; do
		            if $multifile ; then
		                sfname=$(echo ${sf}_${filecnt} | sed 's/[^a-zA-Z0-9_]//g')
		            else
		                sfname=$(echo $sf | sed 's/[^a-zA-Z0-9_]//g')
		            fi
	   	          echo 'TQFolder* '$sfname' = TQFolder::loadFolder("'$infile':'$sf'");' >> $fname
	   	          echo 'std::cout << "\tattached TQFolder '$sfname'" << std::endl;' >> $fname
	          done
	      fi
	      filecnt=$(expr $filecnt + 1)
    fi
    if $loadFolders && [[ $file == *.txt ]]; then
	      filename=${file##*/}
	      filenamebase=${file%.*}
	      foldername=$(echo $filenamebase | sed 's/[^a-zA-Z0-9]//g')
	      echo 'TQFolder* '$foldername' = TQFolder::loadFromTextFile("'$infile'",true);' >> $fname
	      echo 'if('$foldername') std::cout << "\tloaded TQFolder '$foldername' from '$file'" << std::endl;' >> $fname
    fi
    if [[ $file == *.cxx ]] || [[ $file == *.C ]]; then
	      namebase=${infilename%.*}
	      macro=$(grep $namebase'(.*)' $infile)
	      hasmain=$(grep 'main(.*)' $infile)
	      if [ -z "$macro" ] && ! [[ $(head $infile | tr -d '[[:space:]]') == {* ]]; then
	          echo "sorry, $file doesn't seem to be a macro executable by root"
	          if [ -n "$hasmain" ]; then
		            echo "it does, however, seem to have a 'main'-function defined. you can try compiling it with tqcompile instead!"
	          fi
	      else
	          echo 'gROOT->ProcessLine(".x '$infile'");' >> $fname
	      fi
    fi
done

echo '}' >> $fname

cd $TMPDIR

if ! $ISROOT6; then
    cp $fname $TMPDIR/rootlogon.C
fi

if $batch; then
    OPTS+=" -b "
fi

if $silent; then
    root -l $OPTS $WORKDIR 2>tqroot.err
else
    root -l $OPTS $WORKDIR
fi
