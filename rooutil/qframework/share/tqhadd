#!/usr/bin/env python2

import argparse
import sys
import os
import glob


def main(args) :
    outFileName = args.outFile
    force = args.force
    maxOpenedFiles = args.maxOpenedFiles
    newComp = 1
    verbosity = args.verbosity
    inFileList = args.inFiles

    ROOT.gSystem.Load("libTreePlayer")

    if verbosity > 1 :
        print "hadd target file:", outFileName
        pass

    merger = ROOT.TFileMerger(ROOT.kFALSE, ROOT.kFALSE)
    merger.SetMsgPrefix("tqhadd")
    merger.SetPrintLevel(verbosity - 1)

    if maxOpenedFiles > 0 :
        merger.SetMaxOpenedFiles(maxOpenedFiles)
        pass

    if not merger.OutputFile(outFileName, force, newComp) :
        print "hadd error opening target file (does", outFileName, "exist?)."
        print "Pass \"-f\" argument to force re-creation of output file."
        return 0

    for inFile in inFileList :
        if not os.path.isfile(inFile) or not merger.AddFile(inFile) :
            print "Failed to add file \""+inFile+"\""
            return 0
        pass

    status = None
    
    if args.keep :
        merger.AddObjectNames(args.keep)
        status = merger.PartialMerge( ROOT.TFileMerger.kAll | ROOT.TFileMerger.kRegular | ROOT.TFileMerger.kOnlyListed )
    elif args.remove :
        merger.AddObjectNames(args.remove)
        status = merger.PartialMerge( ROOT.TFileMerger.kAll | ROOT.TFileMerger.kRegular | ROOT.TFileMerger.kSkipListed )
    else :
        status = merger.Merge()
        pass

    if status :
        if verbosity == 1 :
            print "hadd merged", merger.GetMergeList().GetEntries(),"input files in", outFileName
            pass
    else :
        if verbosity == 1 :
            print "hadd failure during the merge of", merger.GetMergeList().GetEntries(), "input files in", outFileName
            pass
        pass

    pass


if __name__ == "__main__" :
    parser = argparse.ArgumentParser(description="Advanced hadd python script")
    parser.add_argument("inFiles", metavar="INFILES", type=str, nargs="+", help="List of files to merge to be merged")
    parser.add_argument("-o", "--outFile", metavar="OUTFILE", type=str, dest="outFile", default="mergedNTuple.root", help="Output file name")
    parser.add_argument("-f", "--force", dest="force", action="store_true",default=False, help="Enforce recreation of output file")
    parser.add_argument("-v", "--verbosity", metavar="VERBOSITY", type=int, dest="verbosity", default=99, help="Verbosity level")
    parser.add_argument("-n", "--maxOpenedFiles", metavar="MAXOPENEDFILES", type=int, dest="maxOpenedFiles", default=0, help="Will open at most 'maxOpenedFiles' files at once, use 0 to request to use the system maximum")
    parser.add_argument("-k", "--keep", metavar="KEEP", type=str, dest="keep", default=None, help="Names of TObject names to keep exclusively while merging")
    parser.add_argument("-r", "--remove", metavar="REMOVE", type=str, dest="remove", default=None, help="Names of TObject names to remove while merging")
    args = parser.parse_args()

    sys.argv = []
    import ROOT
    main(args)
    pass
