#include "LHE.h"
#include "rooutil.h"
#include "cxxopts.h"

class AnalysisConfig {

public:

    // TString that holds the input file list (comma separated)
    TString input_file_list_tstring;

    // TString that holds the name of the TTree to open for each input files
    TString input_tree_name;

    // Output TFile
    TFile* output_tfile;

    // Number of events to loop over
    int n_events;

    // Multiplicity object
    unsigned int multiplicity;

    // Pairs
    std::vector<std::pair<unsigned int, unsigned int>> pairs;

    // Jobs to split (if this number is positive, then we will skip certain number of events)
    // If there are N events, and was asked to split 2 ways, then depending on job_index, it will run over first half or latter half
    int nsplit_jobs;

    // Job index (assuming nsplit_jobs is set, the job_index determine where to loop over)
    int job_index;

    // Debug boolean
    bool debug;

    // TChain that holds the input TTree's
    TChain* events_tchain;

    // Custom Looper object to facilitate looping over many files
    RooUtil::Looper<LHE> looper;

    // Custom Cutflow framework
    RooUtil::Cutflow cutflow;

    // Custom Histograms object compatible with RooUtil::Cutflow framework
    RooUtil::Histograms histograms;

};

AnalysisConfig ana;

// ./process INPUTFILEPATH OUTPUTFILE [NEVENTS]
int main(int argc, char** argv)
{

//********************************************************************************
//
// 1. Parsing options
//
//********************************************************************************

    // cxxopts is just a tool to parse argc, and argv easily

    // Grand option setting
    cxxopts::Options options("\n  $ doAnalysis",  "\n         **********************\n         *                    *\n         *       Looper       *\n         *                    *\n         **********************\n");

    // Read the options
    options.add_options()
        ("i,input"       , "Comma separated input file list OR if just a directory is provided it will glob all in the directory BUT must end with '/' for the path", cxxopts::value<std::string>())
        ("t,tree"        , "Name of the tree in the root file to open and loop over"                                             , cxxopts::value<std::string>())
        ("o,output"      , "Output file name"                                                                                    , cxxopts::value<std::string>())
        ("n,nevents"     , "N events to loop over"                                                                               , cxxopts::value<int>()->default_value("-1"))
        ("m,multiplicity", "Book histogram up to considering multiplicity up to m"                                               , cxxopts::value<int>()->default_value("6"))
        ("p,pairs"       , "Book pair object histograms (e.g. 0:1,0:2,1:3)"                                                      , cxxopts::value<std::string>())
        ("j,nsplit_jobs" , "Enable splitting jobs by N blocks (--job_index must be set)"                                         , cxxopts::value<int>())
        ("I,job_index"   , "job_index of split jobs (--nsplit_jobs must be set. index starts from 0. i.e. 0, 1, 2, 3, etc...)"   , cxxopts::value<int>())
        ("d,debug"       , "Run debug job. i.e. overrides output option to 'debug.root' and 'recreate's the file.")
        ("h,help"        , "Print help")
        ;

    auto result = options.parse(argc, argv);

    // NOTE: When an option was provided (e.g. -i or --input), then the result.count("<option name>") is more than 0
    // Therefore, the option can be parsed easily by asking the condition if (result.count("<option name>");
    // That's how the several options are parsed below

    //_______________________________________________________________________________
    // --help
    if (result.count("help"))
    {
        std::cout << options.help() << std::endl;
        exit(1);
    }

    //_______________________________________________________________________________
    // --input
    if (result.count("input"))
    {
        ana.input_file_list_tstring = result["input"].as<std::string>();
    }
    else
    {
        std::cout << options.help() << std::endl;
        std::cout << "ERROR: Input list is not provided! Check your arguments" << std::endl;
        exit(1);
    }

    //_______________________________________________________________________________
    // --tree
    if (result.count("tree"))
    {
        ana.input_tree_name = result["tree"].as<std::string>();
    }
    else
    {
        std::cout << options.help() << std::endl;
        std::cout << "ERROR: Input tree name is not provided! Check your arguments" << std::endl;
        exit(1);
    }

    //_______________________________________________________________________________
    // --debug
    if (result.count("debug"))
    {
        ana.output_tfile = new TFile("debug.root", "recreate");
    }
    else
    {
        //_______________________________________________________________________________
        // --output
        if (result.count("output"))
        {
            ana.output_tfile = new TFile(result["output"].as<std::string>().c_str(), "create");
            if (not ana.output_tfile->IsOpen())
            {
                std::cout << options.help() << std::endl;
                std::cout << "ERROR: output already exists! provide new output name or delete old file. OUTPUTFILE=" << result["output"].as<std::string>() << std::endl;
                exit(1);
            }
        }
        else
        {
            std::cout << options.help() << std::endl;
            std::cout << "ERROR: Output file name is not provided! Check your arguments" << std::endl;
            exit(1);
        }
    }

    //_______________________________________________________________________________
    // --nevents
    ana.n_events = result["nevents"].as<int>();

    //_______________________________________________________________________________
    // --multiplicity
    ana.multiplicity = result["multiplicity"].as<int>();

    //_______________________________________________________________________________
    // --nsplit_jobs
    if (result.count("nsplit_jobs"))
    {
        ana.nsplit_jobs = result["nsplit_jobs"].as<int>();
        if (ana.nsplit_jobs <= 0)
        {
            std::cout << options.help() << std::endl;
            std::cout << "ERROR: option string --nsplit_jobs" << ana.nsplit_jobs << " has zero or negative value!" << std::endl;
            std::cout << "I am not sure what this means..." << std::endl;
            exit(1);
        }
    }
    else
    {
        ana.nsplit_jobs = -1;
    }

    //_______________________________________________________________________________
    // --nsplit_jobs
    if (result.count("job_index"))
    {
        ana.job_index = result["job_index"].as<int>();
        if (ana.job_index < 0)
        {
            std::cout << options.help() << std::endl;
            std::cout << "ERROR: option string --job_index" << ana.job_index << " has negative value!" << std::endl;
            std::cout << "I am not sure what this means..." << std::endl;
            exit(1);
        }
    }
    else
    {
        ana.job_index = -1;
    }

    //_______________________________________________________________________________
    // Parse pairs
    if (result.count("pairs"))
    {
        TString pairs_string = result["pairs"].as<std::string>();
        for (auto& pair_string : RooUtil::StringUtil::split(pairs_string, ","))
        {
            unsigned int i = atoi(RooUtil::StringUtil::split(pair_string, ":")[0].Data());
            unsigned int j = atof(RooUtil::StringUtil::split(pair_string, ":")[1].Data());
            ana.pairs.push_back(std::make_pair(i, j));
        }
    }


    // Sanity check for split jobs (if one is set the other must be set too)
    if (result.count("job_index") or result.count("nsplit_jobs"))
    {
        // If one is not provided then throw error
        if ( not (result.count("job_index") and result.count("nsplit_jobs")))
        {
            std::cout << options.help() << std::endl;
            std::cout << "ERROR: option string --job_index and --nsplit_jobs must be set at the same time!" << std::endl;
            exit(1);
        }
        // If it is set then check for sanity
        else
        {
            if (ana.job_index >= ana.nsplit_jobs)
            {
                std::cout << options.help() << std::endl;
                std::cout << "ERROR: --job_index >= --nsplit_jobs ! This does not make sense..." << std::endl;
                exit(1);
            }
        }
    }

    //
    // Printing out the option settings overview
    //
    std::cout <<  "=========================================================" << std::endl;
    std::cout <<  " Setting of the analysis job based on provided arguments " << std::endl;
    std::cout <<  "---------------------------------------------------------" << std::endl;
    std::cout <<  " ana.input_file_list_tstring: " << ana.input_file_list_tstring <<  std::endl;
    std::cout <<  " ana.output_tfile: " << ana.output_tfile->GetName() <<  std::endl;
    std::cout <<  " ana.n_events: " << ana.n_events <<  std::endl;
    std::cout <<  " ana.nsplit_jobs: " << ana.nsplit_jobs <<  std::endl;
    std::cout <<  " ana.job_index: " << ana.job_index <<  std::endl;
    std::cout <<  "=========================================================" << std::endl;

//********************************************************************************
//
// 2. Opening input baby files
//
//********************************************************************************

    // Create the TChain that holds the TTree's of the baby ntuples
    ana.events_tchain = RooUtil::FileUtil::createTChain(ana.input_tree_name, ana.input_file_list_tstring);

    // Create a Looper object to loop over input files
    // the "www" object is defined in the wwwtree.h/cc
    // This is an instance which helps read variables in the WWW baby TTree
    // It is a giant wrapper that facilitates reading TBranch values.
    // e.g. if there is a TBranch named "lep_pt" which is a std::vector<float> then, one can access the branch via
    //
    //    std::vector<float> lep_pt = www.lep_pt();
    //
    // and no need for "SetBranchAddress" and declaring variable shenanigans necessary
    // This is a standard thing SNT does pretty much every looper we use
    ana.looper.init(ana.events_tchain, &lhe, ana.n_events);

//********************************************************************************
//
// Interlude... notes on RooUtil framework
//
//********************************************************************************

    // ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
    // Quick tutorial on RooUtil::Cutflow object cut tree formation
    // ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
    //
    // The RooUtil::Cutflow object facilitates creating a tree structure of cuts
    //
    // To add cuts to each node of the tree with cuts defined, use "addCut" or "addCutToLastActiveCut"
    // The "addCut" or "addCutToLastActiveCut" accepts three argument, <name>, and two lambda's that define the cut selection, and the weight to apply to that cut stage
    //
    // e.g. To create following cut-tree structure one does
    //
    //             (Root) <--- Always exists as soon as RooUtil::Cutflow object is created. But this is basically hidden underneath and users do not have to care
    //                |
    //            CutWeight
    //            |       |
    //     CutPreSel1    CutPreSel2
    //       |                  |
    //     CutSel1           CutSel2
    //
    //
    //   code:
    //
    //      // Create the object (Root node is created as soon as the instance is created)
    //      RooUtil::Cutflow cutflow;
    //
    //      cutflow.addCut("CutWeight"                 , <lambda> , <lambda>); // CutWeight is added below "Root"-node
    //      cutflow.addCutToLastActiveCut("CutPresel1" , <lambda> , <lambda>); // The last "active" cut is "CutWeight" since I just added that. So "CutPresel1" is added below "CutWeight"
    //      cutflow.addCutToLastActiveCut("CutSel1"    , <lambda> , <lambda>); // The last "active" cut is "CutPresel1" since I just added that. So "CutSel1" is added below "CutPresel1"
    //
    //      cutflow.getCut("CutWeight"); // By "getting" the cut object, this makes the "CutWeight" the last "active" cut.
    //      cutflow.addCutToLastActiveCut("CutPresel2" , <lambda> , <lambda>); // The last "active" cut is "CutWeight" since I "getCut" on it. So "CutPresel2" is added below "CutWeight"
    //      cutflow.addCutToLastActiveCut("CutSel2"    , <lambda> , <lambda>); // The last "active" cut is "CutPresel2" since I just added that. So "CutSel2" is added below "CutPresel1"
    //
    // (Side note: "UNITY" lambda is defined in the framework to just return 1. This so that use don't have to type [&]() {return 1;} so many times.)
    //
    // Once the cutflow is formed, create cutflow histograms can be created by calling RooUtil::Cutflow::bookCutflows())
    // This function looks through the terminating nodes of the tree structured cut tree. and creates a histogram that will fill the yields
    // For the example above, there are two terminationg nodes, "CutSel1", and "CutSel2"
    // So in this case Root::Cutflow::bookCutflows() will create two histograms. (Actually four histograms.)
    //
    //  - TH1F* type object :  CutSel1_cutflow (4 bins, with first bin labeled "Root", second bin labeled "CutWeight", third bin labeled "CutPreSel1", fourth bin labeled "CutSel1")
    //  - TH1F* type object :  CutSel2_cutflow (...)
    //  - TH1F* type object :  CutSel1_rawcutflow (...)
    //  - TH1F* type object :  CutSel2_rawcutflow (...)
    //                                ^
    //                                |
    // NOTE: There is only one underscore "_" between <CutName>_cutflow or <CutName>_rawcutflow
    //
    // And later in the loop when RooUtil::Cutflow::fill() function is called, the tree structure will be traversed through and the appropriate yields will be filled into the histograms
    //
    // After running the loop check for the histograms in the output root file

    // ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
    // Quick tutorial on RooUtil::Histograms object
    // ~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=
    //
    // The RooUtil::Histograms object facilitates book keeping histogram definitions
    // And in conjunction with RooUtil::Cutflow object, one can book same histograms across different cut stages easily without copy pasting codes many times by hand.
    //
    // The histogram addition happens in two steps.
    // 1. Defining histograms
    // 2. Booking histograms to cuts
    //
    // Histograms are defined via following functions
    //
    //      RooUtil::Histograms::addHistogram       : Typical 1D histogram (TH1F*) "Fill()" called once per event
    //      RooUtil::Histograms::addVecHistogram    : Typical 1D histogram (TH1F*) "Fill()" called multiple times per event
    //      RooUtil::Histograms::add2DHistogram     : Typical 2D histogram (TH2F*) "Fill()" called once per event
    //      RooUtil::Histograms::add2DVecHistogram  : Typical 2D histogram (TH2F*) "Fill()" called multiple times per event
    // e.g.
    //
    //    RooUtil::Histograms histograms;
    //    histograms.addHistogram   ("MllSS"    , 180 , 0. , 300. , [&]() { return www.MllSS()  ; }); // The lambda returns float
    //    histograms.addVecHistogram("AllLepPt" , 180 , 0. , 300. , [&]() { return www.lep_pt() ; }); // The lambda returns vector<float>
    //
    // The addVecHistogram will have lambda to return vector<float> and it will loop over the values and call TH1F::Fill() for each item
    //
    // To book histograms to cuts one uses
    //
    //      RooUtil::Cutflow::bookHistogramsForCut()
    //      RooUtil::Cutflow::bookHistogramsForCutAndBelow()
    //      RooUtil::Cutflow::bookHistogramsForCutAndAbove()
    //      RooUtil::Cutflow::bookHistogramsForEndCuts()
    //
    // e.g. Given a tree like the following, we can book histograms to various cuts as we want
    //
    //              Root
    //                |
    //            CutWeight
    //            |       |
    //     CutPreSel1    CutPreSel2
    //       |                  |
    //     CutSel1           CutSel2
    //
    // For example,
    //
    //    1. book a set of histograms to one cut:
    //
    //       cutflow.bookHistogramsForCut(histograms, "CutPreSel2")
    //
    //    2. book a set of histograms to a cut and below
    //
    //       cutflow.bookHistogramsForCutAndBelow(histograms, "CutWeight") // will book a set of histograms to CutWeight, CutPreSel1, CutPreSel2, CutSel1, and CutSel2
    //
    //    3. book a set of histograms to a cut and above (... useless...?)
    //
    //       cutflow.bookHistogramsForCutAndAbove(histograms, "CutPreSel2") // will book a set of histograms to CutPreSel2, CutWeight (nothing happens to Root node)
    //
    //    4. book a set of histograms to a terminating nodes
    //
    //       cutflow.bookHistogramsForEndCuts(histograms) // will book a set of histograms to CutSel1 and CutSel2
    //
    // The naming convention of the booked histograms are as follows
    //
    //   cutflow.bookHistogramsForCut(histograms, "CutSel1");
    //
    //  - TH1F* type object : CutSel1__MllSS;
    //  - TH1F* type object : CutSel1__AllLepPt;
    //                               ^^
    //                               ||
    // NOTE: There are two underscores "__" between <CutName>__<HistogramName>
    //
    // And later in the loop when RooUtil::CutName::fill() function is called, the tree structure will be traversed through and the appropriate histograms will be filled with appropriate variables
    // After running the loop check for the histograms in the output root file

    // Set the cutflow object output file
    ana.cutflow.setTFile(ana.output_tfile);

    // Print cut structure
    ana.cutflow.printCuts();

    // From the .lhe file (which it assumes that the .lhe file is named the same as the input root file with the extension being only difference) we parse the cross section info
    float nevents = 1;
    float xsec = 1;
    TString filename = ana.input_file_list_tstring;
    TString lhefile = filename.ReplaceAll(".root", ".lhe");
    std::cout <<  " lhefile: " << lhefile <<  std::endl;
    std::string line;
    std::ifstream myfile(lhefile.Data());
    if (myfile.is_open())
    {
        while (getline(myfile, line))
        {
            TString ltstring = line.c_str();
            // #  Number of Events        :       10000
            // #  Integrated weight (pb)  :       0.00013113605389
            if (ltstring.Contains("Number of Events"))
            {
                nevents = atof(RooUtil::StringUtil::split(ltstring)[5].Data());
            }
            if (ltstring.Contains("Integrated weight (pb)"))
            {
                xsec = atof(RooUtil::StringUtil::split(ltstring)[5].Data());
            }
        }
        myfile.close();
    }

    std::cout <<  " nevents: " << nevents <<  std::endl;
    std::cout <<  " xsec: " << xsec <<  std::endl;

    ana.cutflow.addCut("Wgt", [&]()
            {
                // FOR EXAMPLE IN CASE WE NEED TO CUT
                return (lhe.P4()[0] + lhe.P4()[1]).mass() > 500.;
            }, [&]()
            {
                return xsec / nevents * 1000. * 0.2172 * 0.2172 * 0.57 * 137; // To set it to fb unit
            }
            );
    // For example if we need to cut
    // ana.cutflow.addCutToLastActiveCut("OffShell", [&](){
    //             TLorentzVector lep;
    //             TLorentzVector neu;
    //             lep.SetPxPyPzE(lhe.P_X().at(2), lhe.P_Y().at(2), lhe.P_Z().at(2), lhe.E().at(2));
    //             neu.SetPxPyPzE(lhe.P_X().at(3), lhe.P_Y().at(3), lhe.P_Z().at(3), lhe.E().at(3));
    //             return (lep + neu).M() > 110.;
    //         }, UNITY);

    // Histogram utility object that is used to define the histograms
    for (unsigned int i = 0; i < ana.multiplicity; i++)
    {
        ana.histograms.addHistogram(TString::Format("Eta%d"    , i) , 180 , -6   , 6    , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].eta(); } );
        ana.histograms.addHistogram(TString::Format("M%d_v1"   , i) , 180 , -50  , 150  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d_v1"  , i) , 180 , -50  , 150  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("E%d_v1"   , i) , 180 , -50  , 150  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d_v2"   , i) , 180 , -50  , 350  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d_v2"  , i) , 180 , -50  , 350  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("E%d_v2"   , i) , 180 , -50  , 350  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d_v3"   , i) , 180 , -50  , 500  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d_v3"  , i) , 180 , -50  , 500  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("E%d_v3"   , i) , 180 , -50  , 500  , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d_v4"   , i) , 180 , -50  , 1000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d_v4"  , i) , 180 , -50  , 1000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("E%d_v4"   , i) , 180 , -50  , 1000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d_v5"   , i) , 180 , -50  , 2000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d_v5"  , i) , 180 , -50  , 2000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("E%d_v5"   , i) , 180 , -50  , 2000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d_v6"   , i) , 180 , -50  , 5000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d_v6"  , i) , 180 , -50  , 5000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("E%d_v6"   , i) , 180 , -50  , 5000 , [& , i]() { if (lhe.P4().size() <= i) return -999.0f; return lhe.P4()[i].energy();   } );
    }

    for (auto& pair : ana.pairs)
    {
        unsigned int i = pair.first;
        unsigned int j = pair.second;
        ana.histograms.addHistogram(TString::Format("Eta%d%d"           , i , j) , 180 , -6   , 6    , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).eta(); } );
        ana.histograms.addHistogram(TString::Format("DeltaEta%d%d"      , i , j) , 180 , 0    , 10   , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return abs(RooUtil::Calc::DeltaEta(lhe.P4()[i], lhe.P4()[j])); } );
        ana.histograms.addHistogram(TString::Format("EtaLead%d%d"       , i , j) , 180 , -6   , 6    , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].eta() : lhe.P4()[j].eta();  } );
        ana.histograms.addHistogram(TString::Format("EtaSubLead%d%d"    , i , j) , 180 , -6   , 6    , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].eta() : lhe.P4()[i].eta();  } );
        ana.histograms.addHistogram(TString::Format("M%d%d_v1"          , i , j) , 180 , -50  , 150  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d%d_v1"         , i , j) , 180 , -50  , 150  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).pt();  } );
        ana.histograms.addHistogram(TString::Format("PtLead%d%d_v1"     , i , j) , 180 , -50  , 150  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].pt() : lhe.P4()[j].pt();  } );
        ana.histograms.addHistogram(TString::Format("PtSubLead%d%d_v1"  , i , j) , 180 , -50  , 150  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].pt() : lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("ELead%d%d_v1"      , i , j) , 180 , -50  , 150  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].energy() : lhe.P4()[j].energy();  } );
        ana.histograms.addHistogram(TString::Format("ESubLead%d%d_v1"   , i , j) , 180 , -50  , 150  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].energy() : lhe.P4()[i].energy();  } );
        ana.histograms.addHistogram(TString::Format("E%d%d_v1"          , i , j) , 180 , -50  , 150  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d%d_v2"          , i , j) , 180 , -50  , 350  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d%d_v2"         , i , j) , 180 , -50  , 350  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).pt();  } );
        ana.histograms.addHistogram(TString::Format("PtLead%d%d_v2"     , i , j) , 180 , -50  , 350  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].pt() : lhe.P4()[j].pt();  } );
        ana.histograms.addHistogram(TString::Format("PtSubLead%d%d_v2"  , i , j) , 180 , -50  , 350  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].pt() : lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("ELead%d%d_v2"      , i , j) , 180 , -50  , 350  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].energy() : lhe.P4()[j].energy();  } );
        ana.histograms.addHistogram(TString::Format("ESubLead%d%d_v2"   , i , j) , 180 , -50  , 350  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].energy() : lhe.P4()[i].energy();  } );
        ana.histograms.addHistogram(TString::Format("E%d%d_v2"          , i , j) , 180 , -50  , 350  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d%d_v3"          , i , j) , 180 , -50  , 500  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d%d_v3"         , i , j) , 180 , -50  , 500  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).pt();  } );
        ana.histograms.addHistogram(TString::Format("PtLead%d%d_v3"     , i , j) , 180 , -50  , 500  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].pt() : lhe.P4()[j].pt();  } );
        ana.histograms.addHistogram(TString::Format("PtSubLead%d%d_v3"  , i , j) , 180 , -50  , 500  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].pt() : lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("ELead%d%d_v3"      , i , j) , 180 , -50  , 500  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].energy() : lhe.P4()[j].energy();  } );
        ana.histograms.addHistogram(TString::Format("ESubLead%d%d_v3"   , i , j) , 180 , -50  , 500  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].energy() : lhe.P4()[i].energy();  } );
        ana.histograms.addHistogram(TString::Format("E%d%d_v3"          , i , j) , 180 , -50  , 500  , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d%d_v4"          , i , j) , 180 , -50  , 1000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d%d_v4"         , i , j) , 180 , -50  , 1000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).pt();  } );
        ana.histograms.addHistogram(TString::Format("PtLead%d%d_v4"     , i , j) , 180 , -50  , 1000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].pt() : lhe.P4()[j].pt();  } );
        ana.histograms.addHistogram(TString::Format("PtSubLead%d%d_v4"  , i , j) , 180 , -50  , 1000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].pt() : lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("ELead%d%d_v4"      , i , j) , 180 , -50  , 1000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].energy() : lhe.P4()[j].energy();  } );
        ana.histograms.addHistogram(TString::Format("ESubLead%d%d_v4"   , i , j) , 180 , -50  , 1000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].energy() : lhe.P4()[i].energy();  } );
        ana.histograms.addHistogram(TString::Format("E%d%d_v4"          , i , j) , 180 , -50  , 1000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d%d_v5"          , i , j) , 180 , -50  , 2000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d%d_v5"         , i , j) , 180 , -50  , 2000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).pt();  } );
        ana.histograms.addHistogram(TString::Format("PtLead%d%d_v5"     , i , j) , 180 , -50  , 2000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].pt() : lhe.P4()[j].pt();  } );
        ana.histograms.addHistogram(TString::Format("PtSubLead%d%d_v5"  , i , j) , 180 , -50  , 2000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].pt() : lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("ELead%d%d_v5"      , i , j) , 180 , -50  , 2000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].energy() : lhe.P4()[j].energy();  } );
        ana.histograms.addHistogram(TString::Format("ESubLead%d%d_v5"   , i , j) , 180 , -50  , 2000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].energy() : lhe.P4()[i].energy();  } );
        ana.histograms.addHistogram(TString::Format("E%d%d_v5"          , i , j) , 180 , -50  , 2000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).energy();   } );
        ana.histograms.addHistogram(TString::Format("M%d%d_v6"          , i , j) , 180 , -50  , 5000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).mass();   } );
        ana.histograms.addHistogram(TString::Format("Pt%d%d_v6"         , i , j) , 180 , -50  , 5000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).pt();  } );
        ana.histograms.addHistogram(TString::Format("PtLead%d%d_v6"     , i , j) , 180 , -50  , 5000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].pt() : lhe.P4()[j].pt();  } );
        ana.histograms.addHistogram(TString::Format("PtSubLead%d%d_v6"  , i , j) , 180 , -50  , 5000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].pt() : lhe.P4()[i].pt();  } );
        ana.histograms.addHistogram(TString::Format("ELead%d%d_v6"      , i , j) , 180 , -50  , 5000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[i].energy() : lhe.P4()[j].energy();  } );
        ana.histograms.addHistogram(TString::Format("ESubLead%d%d_v6"   , i , j) , 180 , -50  , 5000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return lhe.P4()[i].pt() > lhe.P4()[j].pt() ? lhe.P4()[j].energy() : lhe.P4()[i].energy();  } );
        ana.histograms.addHistogram(TString::Format("E%d%d_v6"          , i , j) , 180 , -50  , 5000 , [& , i , j]() { if (lhe.P4().size() <= i or lhe.P4().size() <= j) return -999.0f; return (lhe.P4()[i] + lhe.P4()[j]).energy();   } );
    }

    // Book cutflows
    ana.cutflow.bookCutflows();

    // Book Histograms
    ana.cutflow.bookHistograms(ana.histograms); // if just want to book everywhere

    // Looping input file
    while (ana.looper.nextEvent())
    {

        // If splitting jobs are requested then determine whether to process the event or not based on remainder
        if (result.count("job_index") and result.count("nsplit_jobs"))
        {
            if (ana.looper.getNEventsProcessed() % ana.nsplit_jobs != (unsigned int) ana.job_index)
                continue;
        }

        //Do what you need to do in for each event here
        //To save use the following function
        ana.cutflow.fill();
    }

    // Writing output file
    ana.cutflow.saveOutput();

    // The below can be sometimes crucial
    delete ana.output_tfile;
}
